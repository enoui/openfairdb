openapi: 3.0.2
info:
  title: OpenFairDB API
  version: 0.1.0
  contact:
    name: slowtec GmbH
    url: 'https://slowtec.de'
  license:
    name: AGPLv3
    url: 'https://github.com/slowtec/openfairdb/blob/master/LICENSE'
servers:
  - url: 'https://api.ofdb.io/v0/'
    description: Public production server
  - url: 'https://nightly.ofdb.io/v0/'
    description: Public unstable development server
paths:
  /search:
    get:
      summary: Search for entries
      tags:
        - Search
      parameters:
        - name: text
          in: query
          schema:
            type: string
        - name: bbox
          in: query
          schema:
            type: string
        - name: categories
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
      
  /entries:
    post:
      tags:
        - Entries
      summary: Create a new entry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '201':
          description: Created a new entry
          content:
            application/json:
              schema:
                description: The ID of the created entry
                type: string
  '/entries/{id}':
    get:
      summary: Get an entry
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
    put:
      summary: Update an entry
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true #ToDo: is this correct?
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        '200':
          description: Sucessfully updated the entry

  '/ratings/{id}':
    get:
      summary: Get a specific rating
      tags:
        - Ratings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
  /categories:
    get:
      summary: Get available categories
      tags:
        - Categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  '/categories/{id}':
    get:
      summary: Get a specific categories
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /events:
    get:
      tags:
        - Events
      summary: Receive events
      parameters:
        - name: tag
          in: query
          description: Filter events by tags
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/BoundingBox'
        - name: created_by
          in: query
          description: The email address of the event creator (only available with valid API token)
          schema:
            type: string
        - name: start
          in: query
          description: Filter events by `event.start` >= `start`
          schema:
            type: number
        - name: end
          in: query
          description: Filter events by `event.end` <= `end`
          schema:
            type: number
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - Events
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Created a new event
          content:
            application/json:
              schema:
                description: The ID of the created event
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/events/{id}':
    get:
      summary: Get a single event
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      summary: Update an event
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Sucessfully updated the event
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete an event
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sucessfully deleted the event
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/users/{username}':
    get:
      summary: Get user data
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sucessfull response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /count/entries:
    get:
      summary: Get number of entries
      tags:
        - Stats
      responses:
        '200':
          description: Sucessfull response
          content:
            application/json:
              schema:
                type: integer
  /count/tags:
    get:
      summary: Get number of tags
      tags:
        - Stats
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: integer
  /server/version:
    get:
      summary: Get current server version
      tags:
        - Stats
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
  /server/api.yaml:
    get:
      summary: Get current API documentation
      tags:
        - Stats
      responses:
        '200':
          description: Successful response
          content:
            text/yaml:
              schema:
                type: string
  /export/entries.csv:
    get:
      summary: Export data as CSV
      tags:
        - Export
      responses:
        '200':
          description: Successful response
          content:
            text/csv:
              schema:
                type: string
components:
  schemas:
    Entry:
      properties:
        id:
          type: string
          readOnly: true
        version:
          type: integer
        created:
          type: integer
        title:
          type: string
        description:
          type: string
        lat:
          type: number
        lng:
          type: number
        street:
          type: string
        zip:
          type: string
        city:
          type: string
        country:
          type: string
        email:
          type: string
        telephone:
          type: string
        homepage:
          type: string
        categories:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        ratings:
          type: array
          items:
            type: string
        image_url:
          type: string
        image_link_url:
          type: string
        license:
          type: string
      example:
        title: Title
        description: Some description
        lat: 0.0
        lng: 0.0
        street: "Street Name 5"
        zip: "23423"
        city: CityName
        country: Germany
        categories:
          - 77b3c33a92554bcf8e8c2c86cedd6f6f
        tags:
          - bio
        license: CC0-1.0
      
    Category:
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: integer
        version:
          type: integer
        name:
          type: string
    Rating:
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        created:
          type: integer
        value:
          type: integer
        context:
          type: string
        source:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/RatingComment'
    RatingComment:
      properties:
        id:
          type: string
          readOnly: true
        created:
          $ref: '#/components/schemas/UnixTime'
        text:
          type: string
    User:
      properties:
        username:
          type: string
        email:
          type: string
    BboxSubscription:
      properties:
        id:
          type: string
          readOnly: true
        south_west_lat:
          type: number
        south_west_lng:
          type: number
        north_east_lat:
          type: number
        north_east_lng:
          type: number
    SearchResult:
      properties:
        visible:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              lat:
                type: number
              lng:
                type: number
        invisible:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              lat:
                type: number
              lng:
                type: number
    Event:
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        start:
          $ref: '#/components/schemas/UnixTime'
        end:
          $ref: '#/components/schemas/UnixTime'
        created_at:
          $ref: '#/components/schemas/UnixTime'
        created_by:
          type: string
          description: |
            The email address of the user who is responsible for the content.
            This information is only available for authorized organizations.
        lat:
          type: number
          format: float
        lng:
          type: number
          format: float
        street:
          type: string
        zip:
          type: string
        city:
          type: string
        country:
          type: string
        email:
          type: string
          description: The public email address
        telephone:
          type: string
        tags:
          type: array
          items:
            type: string
        homepage:
          type: string
    UnixTime:
      type: integer
      format: int64
      description: Unix Time (number of milliseconds since 1970)
  parameters:
    BoundingBox:
      name: bbox
      in: query
      description: Bounding Box
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
